<#include "/macro.include"/>
<#assign className = table.className>   
<#assign classNameFirstLower = table.classNameFirstLower>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro namespace>${className}.</#macro>

<mapper namespace="${basepackage}.mapper.${className}Mapper">

	<resultMap id="${className}" type="${basepackage}.model.${className}">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName}"/>
		</#list>
	</resultMap>
	
	<sql id="${className}Columns">
	    <![CDATA[
		<#list table.columns as column>${column.sqlName}<#if column_has_next>,</#if></#list>
	    ]]>
	</sql>

	<insert id="insert" useGeneratedKeys="true" keyProperty="${table.idColumn.columnNameFirstLower}">
    <![CDATA[
        INSERT INTO ${table.sqlName} (
        <#list table.columns as column>
        	${column.sqlName} <#if column_has_next>,</#if>
        </#list>
        ) VALUES (
        <#list table.columns as column>
        	<@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
        </#list>        
        )
    ]]>
	</insert>
    
	<update id="update" >
    <![CDATA[
        UPDATE ${table.sqlName} SET
	        <#list table.notPkColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameFirstLower/> <#if column_has_next>,</#if>
	        </#list>
        WHERE 
        	<#list table.compositeIdColumns as column>
	        ${column.sqlName} = <@mapperEl column.columnNameLower/> <#if column_has_next> AND </#if>
	        </#list>	        
    ]]>
	</update>

    <delete id="delete">
    <![CDATA[
        DELETE FROM ${table.sqlName} WHERE
        <#list table.compositeIdColumns as column>
        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		</#list>
    ]]>
    </delete>
    
    <select id="getById" resultMap="${className}">
		SELECT <include refid="${className}Columns" />
	    <![CDATA[
		    FROM ${table.sqlName} 
	        WHERE 
				<#list table.compositeIdColumns as column>
		        ${column.sqlName} = <@mapperEl 'id'/> <#if column_has_next> AND </#if>
		        </#list>    
	    ]]>
	</select>
	
	<sql id="${className}FindPageWhere">
		<where>
	       <#list table.columns as column>
	       <#if column.isDateTimeColumn>
	       <if test="@Ognl@isNotEmpty(${column.columnNameFirstLower}Begin)">
				AND ${column.sqlName} >= <@mapperEl column.columnNameFirstLower+"Begin"/>
		   </if>
		   <if test="@Ognl@isNotEmpty(${column.columnNameFirstLower}End)">
				AND ${column.sqlName} &lt;= <@mapperEl column.columnNameFirstLower+"End"/>
		   </if>
	       <#else>
	       <if test="@Ognl@isNotEmpty(${column.columnNameFirstLower})">
				AND ${column.sqlName} = <@mapperEl column.columnNameFirstLower/>
			</if>
	       </#if>
	       </#list>			
		</where>
	</sql>

    <select id="list" resultMap="${className}">
    	SELECT <include refid="${className}Columns" />
	    FROM ${table.sqlName} 
		<include refid="${className}FindPageWhere"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY <@jspEl 'sortColumns'/>
		</if>
    </select>

</mapper>

